// ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß
const fetch = require('node-fetch');

async function testImprovedReports() {
  console.log('üß™ Testing Improved Reports System...\n');

  try {
    // Test 1: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà)
    console.log('üìä Test 1: Testing all data report...');
    const allDataResponse = await fetch('http://localhost:3001/api/reports/production-analysis?limit=10000');
    const allData = await allDataResponse.json();
    
    if (allData.success) {
      console.log('‚úÖ All data report successful');
      console.log('üìà Summary:', {
        total_jobs: allData.data.summary.total_jobs,
        completed_jobs: allData.data.summary.completed_jobs,
        in_progress_jobs: allData.data.summary.in_progress_jobs,
        not_started_jobs: allData.data.summary.not_started_jobs,
        completion_rate: allData.data.summary.completion_rate + '%'
      });
      console.log('üìä Job statistics count:', allData.data.job_statistics?.length || 0);
      console.log('üéØ Time variance jobs count:', allData.data.time_variance_jobs?.length || 0);
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
      if (allData.data.job_statistics && allData.data.job_statistics.length > 0) {
        console.log('\nüèÜ Top 5 most frequent jobs:');
        allData.data.job_statistics.slice(0, 5).forEach((job, index) => {
          console.log(`${index + 1}. ${job.job_name} (${job.job_code})`);
          console.log(`   Frequency: ${job.frequency}, Work Plans: ${job.total_work_plans || job.frequency}`);
          console.log(`   Completed: ${job.total_completed}, Accuracy: ${job.accuracy_rate}%`);
        });
      }
    } else {
      console.log('‚ùå All data report failed:', allData.message);
    }

    // Test 2: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    console.log('\nüìä Test 2: Testing date range report...');
    const startDate = '2024-01-01';
    const endDate = '2024-12-31';
    const dateRangeResponse = await fetch(`http://localhost:3001/api/reports/production-analysis?start_date=${startDate}&end_date=${endDate}&limit=10000`);
    const dateRangeData = await dateRangeResponse.json();
    
    if (dateRangeData.success) {
      console.log('‚úÖ Date range report successful');
      console.log('üìà Summary for', startDate, 'to', endDate + ':');
      console.log({
        total_jobs: dateRangeData.data.summary.total_jobs,
        completed_jobs: dateRangeData.data.summary.completed_jobs,
        completion_rate: dateRangeData.data.summary.completion_rate + '%'
      });
    } else {
      console.log('‚ùå Date range report failed:', dateRangeData.message);
    }

    // Test 3: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ã‡πâ‡∏≥
    console.log('\nüîç Test 3: Checking for duplicate job counting...');
    if (allData.success && allData.data.job_statistics) {
      const duplicateCheck = {};
      allData.data.job_statistics.forEach(job => {
        const key = job.job_code;
        if (duplicateCheck[key]) {
          console.log('‚ö†Ô∏è Found duplicate job_code:', key);
        } else {
          duplicateCheck[key] = true;
        }
      });
      console.log('‚úÖ No duplicate job codes found in statistics');
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ frequency ‡∏™‡∏π‡∏á‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
      const suspiciousJobs = allData.data.job_statistics.filter(job => 
        job.total_work_plans && job.total_work_plans > job.frequency * 2
      );
      
      if (suspiciousJobs.length > 0) {
        console.log('‚ö†Ô∏è Found jobs with suspicious frequency counts:');
        suspiciousJobs.forEach(job => {
          console.log(`   ${job.job_name}: frequency=${job.frequency}, work_plans=${job.total_work_plans}`);
        });
      } else {
        console.log('‚úÖ No suspicious frequency counts detected');
      }
    }

    // Test 4: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ logs ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
    console.log('\nüîç Test 4: Checking jobs with logs but not showing as completed...');
    if (allData.success && allData.data.jobs) {
      const jobsWithLogs = allData.data.jobs.filter(job => job.has_logs);
      const jobsCompleted = allData.data.jobs.filter(job => job.has_completed_sessions);
      const jobsWithLogsButNotCompleted = allData.data.jobs.filter(job => 
        job.has_logs && !job.has_completed_sessions
      );
      
      console.log('üìä Jobs with any logs:', jobsWithLogs.length);
      console.log('üìä Jobs with completed sessions:', jobsCompleted.length);
      console.log('üìä Jobs with logs but not completed:', jobsWithLogsButNotCompleted.length);
      
      if (jobsWithLogsButNotCompleted.length > 0) {
        console.log('üîç Sample jobs with logs but not completed:');
        jobsWithLogsButNotCompleted.slice(0, 3).forEach(job => {
          console.log(`   ${job.job_name} (${job.job_code}): ${job.production_status}`);
          console.log(`   Start logs: ${job.start_logs}, Stop logs: ${job.stop_logs}`);
        });
      }
    }

    console.log('\nüéâ Testing completed!');

  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
testImprovedReports();