const { pool } = require('./config/database');
const moment = require('moment');

class SystemMonitor {
  constructor() {
    this.stats = {
      startTime: new Date(),
      requests: 0,
      errors: 0,
      databaseConnections: 0,
      activeUsers: 0,
      systemHealth: 'healthy'
    };
    
    this.alerts = [];
    this.isMonitoring = false;
  }

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
  start() {
    if (this.isMonitoring) return;
    
    console.log('üîç Starting real-time monitoring system...');
    this.isMonitoring = true;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    this.monitoringInterval = setInterval(() => {
      this.checkSystemHealth();
    }, 30000);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö database connection ‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ
    this.dbMonitoringInterval = setInterval(() => {
      this.checkDatabaseHealth();
    }, 60000);
    
    console.log('‚úÖ Real-time monitoring started');
  }

  // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
  stop() {
    if (!this.isMonitoring) return;
    
    console.log('üõë Stopping real-time monitoring system...');
    this.isMonitoring = false;
    
    if (this.monitoringInterval) {
      clearInterval(this.monitoringInterval);
    }
    
    if (this.dbMonitoringInterval) {
      clearInterval(this.dbMonitoringInterval);
    }
    
    console.log('‚úÖ Real-time monitoring stopped');
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏∞‡∏ö‡∏ö
  async checkSystemHealth() {
    try {
      const uptime = moment().diff(this.stats.startTime, 'minutes');
      const errorRate = this.stats.requests > 0 ? (this.stats.errors / this.stats.requests * 100) : 0;
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö error rate
      if (errorRate > 10) {
        this.createAlert('HIGH_ERROR_RATE', `Error rate is ${errorRate.toFixed(2)}%`);
        this.stats.systemHealth = 'warning';
      } else if (errorRate > 5) {
        this.createAlert('MEDIUM_ERROR_RATE', `Error rate is ${errorRate.toFixed(2)}%`);
        this.stats.systemHealth = 'warning';
      } else {
        this.stats.systemHealth = 'healthy';
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö uptime
      if (uptime > 1440) { // 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        this.createAlert('LONG_UPTIME', `System has been running for ${uptime} minutes`);
      }
      
      console.log('üìä System Health Check:', {
        uptime: `${uptime} minutes`,
        requests: this.stats.requests,
        errors: this.stats.errors,
        errorRate: `${errorRate.toFixed(2)}%`,
        health: this.stats.systemHealth,
        activeUsers: this.stats.activeUsers
      });
      
    } catch (error) {
      console.error('‚ùå Error in system health check:', error);
      this.createAlert('MONITORING_ERROR', error.message);
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û database
  async checkDatabaseHealth() {
    try {
      const connection = await pool.getConnection();
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö connection pool
      const poolStats = pool.pool;
      this.stats.databaseConnections = poolStats.length;
      
      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö query
      const [rows] = await connection.execute('SELECT 1 as test');
      
      if (rows[0].test !== 1) {
        this.createAlert('DATABASE_ERROR', 'Database query test failed');
      }
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô connections
      if (this.stats.databaseConnections > 8) {
        this.createAlert('HIGH_DB_CONNECTIONS', `Database has ${this.stats.databaseConnections} active connections`);
      }
      
      connection.release();
      
      console.log('üóÑÔ∏è Database Health Check:', {
        connections: this.stats.databaseConnections,
        status: 'healthy'
      });
      
    } catch (error) {
      console.error('‚ùå Database health check failed:', error);
      this.createAlert('DATABASE_CONNECTION_ERROR', error.message);
    }
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  createAlert(type, message) {
    const alert = {
      id: Date.now(),
      type: type,
      message: message,
      timestamp: new Date(),
      severity: this.getSeverity(type)
    };
    
    this.alerts.push(alert);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô console
    console.log(`üö® ALERT [${alert.severity.toUpperCase()}]: ${alert.message}`);
    
    // ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 100 ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    if (this.alerts.length > 100) {
      this.alerts = this.alerts.slice(-100);
    }
  }

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  getSeverity(type) {
    const highSeverity = ['DATABASE_ERROR', 'MONITORING_ERROR', 'HIGH_ERROR_RATE'];
    const mediumSeverity = ['HIGH_DB_CONNECTIONS', 'MEDIUM_ERROR_RATE'];
    
    if (highSeverity.includes(type)) return 'high';
    if (mediumSeverity.includes(type)) return 'medium';
    return 'low';
  }

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ request
  incrementRequests() {
    this.stats.requests++;
  }

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ error
  incrementErrors() {
    this.stats.errors++;
  }

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  updateActiveUsers(count) {
    this.stats.activeUsers = count;
  }

  // ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  getStats() {
    return {
      ...this.stats,
      uptime: moment().diff(this.stats.startTime, 'minutes'),
      alerts: this.alerts.slice(-10) // 10 ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    };
  }

  // ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  getAlerts() {
    return this.alerts;
  }

  // ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  clearAlerts() {
    this.alerts = [];
    console.log('üßπ Alerts cleared');
  }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
const systemMonitor = new SystemMonitor();

module.exports = systemMonitor; 